---
import Layout from '../layouts/Layout.astro';
import { supabase } from '../lib/supabaseClient';

interface Project {
    id: string;
    title: string;
    description: string;
    image_url?: string;
    live_url?: string;
    technologies?: string[];
    created_at: string;
}

// Obtener los proyectos iniciales con manejo de errores
let projects: Project[] = [];
try {
    const { data, error } = await supabase
        .from('projects')
        .select('*')
        .order('created_at', { ascending: false });

    if (error) {
        console.error('Error fetching projects:', error);
    } else {
        projects = data || [];
    }
} catch (e) {
    console.error('Error al cargar proyectos:', e);
}
---

<Layout>
    <section class="projects">
        <div class="container">
            <h1>Mis Proyectos</h1>
            <div class="projects-grid" id="projects-container">
                {projects?.map((project) => (
                    <article class="project-card">
                        <div class="project-image">
                            <img src={project.image_url || '/placeholder-project.jpg'} alt={project.title} />
                        </div>
                        <div class="project-content">
                            <h2>{project.title}</h2>
                            <p>{project.description}</p>
                            <div class="project-tags">
                                {project.technologies?.map((tech: string) => (
                                    <span class="tag">{tech}</span>
                                ))}
                            </div>
                            {project.live_url && (
                                <a href={project.live_url} target="_blank" rel="noopener noreferrer" class="project-link">
                                    Ver Proyecto
                                </a>
                            )}
                        </div>
                    </article>
                ))}
            </div>
        </div>
    </section>
</Layout>

<script>
    import { supabase } from '../lib/supabaseClient';
    import type { RealtimeChannel } from '@supabase/supabase-js';

    interface Project {
        id: string;
        title: string;
        description: string;
        image_url?: string;
        live_url?: string;
        technologies?: string[];
        created_at: string;
    }

    // Funci贸n para crear una nueva tarjeta de proyecto
    function createProjectCard(project: Project): HTMLElement {
        const article = document.createElement('article');
        article.className = 'project-card';
        article.setAttribute('data-project-id', project.id);

        const techTags = project.technologies 
            ? project.technologies.map(tech => `<span class="tag">${tech}</span>`).join('')
            : '';

        article.innerHTML = `
            <div class="project-image">
                <img src="${project.image_url || '/placeholder-project.jpg'}" 
                     alt="${project.title}" 
                     loading="lazy" />
            </div>
            <div class="project-content">
                <h2>${project.title}</h2>
                <p>${project.description}</p>
                <div class="project-tags">
                    ${techTags}
                </div>
                ${project.live_url ? `
                    <a href="${project.live_url}" 
                       target="_blank" 
                       rel="noopener noreferrer" 
                       class="project-link">
                        Ver Proyecto
                    </a>
                ` : ''}
            </div>
        `;

        return article;
    }

    // Funci贸n para actualizar un proyecto existente
    function updateProjectCard(projectId: string, newData: Project): void {
        const card = document.querySelector(`[data-project-id="${projectId}"]`);
        if (card) {
            const newCard = createProjectCard(newData);
            card.replaceWith(newCard);
        }
    }

    // Funci贸n para eliminar un proyecto
    function deleteProjectCard(projectId: string): void {
        const card = document.querySelector(`[data-project-id="${projectId}"]`);
        if (card) {
            card.remove();
        }
    }

    // Suscripci贸n a cambios en tiempo real
    const channel: RealtimeChannel = supabase.channel('public:projects')
        .on('postgres_changes', 
            { event: '*', schema: 'public', table: 'projects' },
            (payload: any) => {
                const container = document.getElementById('projects-container');
                
                if (!container) return;

                switch (payload.eventType) {
                    case 'INSERT':
                        if (payload.new) {
                            const newCard = createProjectCard(payload.new as Project);
                            container.insertBefore(newCard, container.firstChild);
                        }
                        break;
                    case 'UPDATE':
                        if (payload.new) {
                            updateProjectCard(payload.new.id, payload.new as Project);
                        }
                        break;
                    case 'DELETE':
                        if (payload.old) {
                            deleteProjectCard(payload.old.id);
                        }
                        break;
                }
            }
        )
        .subscribe();

    // Limpieza al desmontar
    document.addEventListener('astro:unmount', () => {
        supabase.removeChannel(channel);
    });
</script>

<style>
    .projects {
        padding: 5rem 2rem;
        background-color: #f8f9fa;
        min-height: 100vh;
    }

    .container {
        max-width: 1200px;
        margin: 0 auto;
    }

    h1 {
        text-align: center;
        font-size: 2.5rem;
        margin-bottom: 3rem;
        color: #1a1a1a;
        position: relative;
    }

    h1::after {
        content: '';
        position: absolute;
        bottom: -10px;
        left: 50%;
        transform: translateX(-50%);
        width: 60px;
        height: 3px;
        background: #2196F3;
    }

    .projects-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 2rem;
        padding: 1rem;
    }

    .project-card {
        background: white;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .project-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 12px rgba(0, 0, 0, 0.15);
    }

    .project-image {
        width: 100%;
        height: 200px;
        overflow: hidden;
    }

    .project-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }

    .project-card:hover .project-image img {
        transform: scale(1.05);
    }

    .project-content {
        padding: 1.5rem;
    }

    h2 {
        margin: 0 0 1rem 0;
        color: #333;
        font-size: 1.5rem;
    }

    p {
        color: #666;
        line-height: 1.6;
        margin-bottom: 1rem;
    }

    .project-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin-bottom: 1rem;
    }

    .tag {
        background-color: #e3f2fd;
        color: #2196F3;
        padding: 0.3rem 0.8rem;
        border-radius: 15px;
        font-size: 0.9rem;
    }

    .project-link {
        display: inline-block;
        background-color: #2196F3;
        color: white;
        padding: 0.8rem 1.5rem;
        border-radius: 5px;
        text-decoration: none;
        transition: background-color 0.3s ease;
    }

    .project-link:hover {
        background-color: #1976D2;
    }

    @media (max-width: 768px) {
        .projects {
            padding: 3rem 1rem;
        }

        .projects-grid {
            grid-template-columns: 1fr;
        }

        h1 {
            font-size: 2rem;
        }

        h2 {
            font-size: 1.3rem;
        }
    }
</style>